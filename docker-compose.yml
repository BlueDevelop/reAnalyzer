version: '2.1'

services:
  # reanalyzer:
  #   image: reanalyzer
  #   build: .
  #   environment:
  #     NODE_ENV: dev
  #     MONGO: mongodb://mongodb:27017/reAnalyzer_dev
  #     PORT: 4000
  #     DEBUG: 'false'
  #   ports:
  #     - 4000:4000
  #   volumes:
  #     - logs:/home/omer/Desktop/logs
  #     - ./:/usr/src/app
  #   depends_on: 
  #     - mongodb
  alakazam:
    image: rabiran/alakazam:latest
    ports:
      - 8080:8080
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
    ports: ['9200:9200']
    container_name: elasticsearch
    mem_limit: 1g
    environment:
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - 'discovery.type=single-node'
      - 'network.host=0.0.0.0'
      - 'http.cors.enabled=true'
      - 'http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358'
      - 'http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization'
      - 'http.cors.allow-credentials=true'
    volumes:
      - esdata1:/usr/share/elasticsearch/data
  kibana:
    image: docker.elastic.co/kibana/kibana:6.3.2
    container_name: kibana
    ports: ['5601:5601']
    depends_on: ['elasticsearch']
  apm:
    image: docker.elastic.co/apm/apm-server:6.3.2
    container_name: apm
    environment:
      - 'ES_HOSTS=http://elasticsearch:9200'
    ports: ['8200:8200']
    depends_on: ['elasticsearch', 'kibana']
  mongodb:
    image: mongo:latest
    container_name: 'mongodb'
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGODB_REPLICA_SET_MODE=primary
    volumes:
      - dbvolume:/var/lib/mongodb
    ports:
      - 27017:27017
    command: mongod --smallfiles --logpath=/dev/null --replSet=mongo-azure
  # nginx: 
  #   image: nginx:latest
  #   container_name: nginx
  #   network_mode: host
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  neo4j:
    image: rabiran/neo4j-apoc
    ports:
      - 7474:7474
      - 7473:7473
      - 7687:7687
    volumes:
      - $HOME/neo4j/data:/data
    environment: 
      - NEO4J_dbms_security_procedures_unrestricted=apoc.\\\*
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true 
      - NEO4J_apoc_import_file_use__neo4j__config=true
  #assumes neo4j-hierarchy is in the sibling directory
  neo4j-server:
    image: server
    build: ../neo4j-hierarchy/server
    environment:
      NODE_ENV: production
      PORT: 8001
    ports:
      - 8001:8001
    volumes:
      - ../neo4j-hierarchy/server:/usr/src/app 
  testsamlidp_idp:
    image: kristophjunge/test-saml-idp
    volumes: 
     - ./users.php:/var/www/simplesamlphp/config/authsources.php
    environment:
      SIMPLESAMLPHP_SP_ENTITY_ID: http://localhost:3000/metadata.xml
      SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE: http://localhost:3000/auth/saml
      SIMPLESAMLPHP_SP_SINGLE_LOGOUT_SERVICE: http://localhost/simplesaml/module.php/saml/sp/saml2-logout.php/test-sp
      SAML_ISSUER: http://localhost:3000/metadata.xml
      SAML_CALLBACK_URL: http://localhost:3000/auth/saml/callback
      SIMPLESAMLPHP_ADMIN_PASSWORD: test
      SIMPLESAMLPHP_SECRET_SALT: salt
    ports:
    - "8081:8080"
    - "8443:8443"
  shraga-proxy:
    environment: 
      MONGODB_URL: mongodb://mongo-shraga:27017
      MONGODB_NAME: shraga-proxy
      SESSION_SECRET: Secret
      SAML_ENTRY_POINT: http://localhost:8081/simplesaml/saml2/idp/SSOService.php
    image: shragauser/shraga-proxy
    ports:
     - 3000:3000
    depends_on: 
     - mongo-shraga
  mongo-shraga:
    image: mongo:latest
  # sso:
  #   image: kristophjunge/test-saml-idp
  #   ports:
  #    - 8080:8080
  #    - 8443:8443
  #   environment: 
  #    - SIMPLESAMLPHP_SP_ENTITY_ID=http://app.example.com
  #    - SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE=http://localhost/simplesaml/module.php/saml/sp/saml2-acs.php/test-sp
  #    - SIMPLESAMLPHP_SP_SINGLE_LOGOUT_SERVICE=http://localhost/simplesaml/module.php/saml/sp/saml2-logout.php/test-sp
  # ----------python consumer------------------
  # python-consumer:
  #   image: rabiran/python-consumer
  #   ports:
  #     - 8080:8080
  #   depends_on: 
  #     - kafka
  #     - root
  #     - mongodb
  # nightwatch:
  #   image: rabiran/nightwatch
  #   depends_on:
  #     - root
  #     - python-consumer
  # root:
  #   image: rabiran/root
  #   # image: python-consumer_root
  #   # build:
  #   #   context: ../root/
  #   #   dockerfile: Dockerfile
  #   environment: 
  #     PORT: 3000
  #     MONGODB_URI: mongodb://mongodb/icu-dev
  #     ELASTICSEARCH_IP: elasticsearch
  #     GET_HOSTS_FROM: dns
  #   ports: ['3000:3000']
  #   command: node server
  #   depends_on: 
  #     - mongodb
  #     - elasticsearch
  # zookeeper:
  #   image: debezium/zookeeper
  #   container_name: zookeeper
  #   ports: ['2181:2181','2888:2888','3888:3888']
  # kafka:
  #   image: debezium/kafka
  #   container_name: kafka
  #   ports: ['9092:9092']
  #   depends_on: 
  #     - zookeeper
  #   environment: 
  #     - ZOOKEEPER_CONNECT=zookeeper
  #     - KAFKA_PORT=9092
  #   links:
  #     - zookeeper
  # connect:
  #   image: debezium/connect
  #   container_name: connect
  #   ports: ['8083:8083']
  #   environment: 
  #     - CONFIG_STORAGE_TOPIC=my-connect-configs
  #     - OFFSET_STORAGE_TOPIC=my-connect-offsets
  #     - BOOTSTRAP_SERVERS=kafka:9092
  #   depends_on: 
  #     - kafka
  #     - zookeeper
  #     - mongodb
  #   links:
  #     - kafka
  #     - mongodb
volumes:
  esdata1:
    driver: local
  logs:
    driver: local
  dbvolume:
    driver: local
